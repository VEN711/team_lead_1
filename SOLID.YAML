SOLID:
block 3: Класс Customer выполняет две разные функции: размещает заказы и отправляет уведомления. 
Это нарушает принцип единственной ответственности 

block 4: Нарушает принцип Dependency Inversion. 
Этот принцип говорит о том, что модули верхних уровней не должны зависеть от модулей нижних уровней. Оба должны зависеть от абстракций. 
В данном случае, класс Switch напрямую зависит от конкретного класса LightBuld, что делает систему жесткой и сложной для изменений.

block 5: Нарушает принцип Liskov Substitution. 
Объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения корректности программы. 
В данном случае, класс Penguin является подклассом Bird, но он не может "летать" (метод fly), что противоречит поведению, определенному в базовом классе. 
Это может привести к ошибкам, если мы ожидаем, что все птицы могут летать.


